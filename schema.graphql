# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface Node {
    id: ID!
}

interface NodeConnection {
    edges: [NodeConnectionEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

interface NodeConnectionEdge {
    next: Node
    node: Node
    previous: Node
}

type Metadata {
    pathPrefix: String
    siteDescription: String
    siteName: String
    siteUrl: String
}

type NodeBelongsTo implements NodeConnection {
    edges: [NodeBelongsToEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type NodeBelongsToEdge implements NodeConnectionEdge {
    next: Node
    node: Node
    previous: Node
}

type Page {
    context: JSON!
    path: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    isFirst: Boolean!
    isLast: Boolean!
    perPage: Int!
    totalItems: Int!
    totalPages: Int!
}

type Post implements Node {
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    canonical_url: Boolean
    content: String
    cover_image(
        "Background color for 'contain'"
        background: String,
        "Blur level for base64 string"
        blur: Int,
        "Fit"
        fit: ImageFit = cover,
        "Height"
        height: Int,
        "Quality (default: 75)"
        quality: Int,
        "Width"
        width: Int
    ): Image
    date(
        "Date format"
        format: String,
        "Locale"
        locale: String
    ): Date
    description: String
    excerpt: String
    fileInfo: Post_FileInfo
    headings(depth: RemarkHeadingLevels, stripTags: Boolean = true): [RemarkHeading]
    id: ID!
    path(to: String = "default"): String
    published: Boolean
    series: Boolean
    tags(limit: Int, order: SortOrder = DESC, skip: Int = 0, sort: [SortArgument], sortBy: String): [Tag]
    timeToRead(
        "Words per minute"
        speed: Int = 230
    ): Int
    title: String
}

type PostConnection implements NodeConnection {
    edges: [PostEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type PostEdge implements NodeConnectionEdge {
    next: Post
    node: Post
    previous: Post
}

type Post_FileInfo {
    directory: String
    extension: String
    name: String
    path: String
}

type Query {
    allPage(
        "Filter pages."
        filter: PageFilterInput
    ): [Page]
    allPost(
        "Filter for Post nodes."
        filter: PostFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "date"
    ): PostConnection
    allTag(
        "Filter for Tag nodes."
        filter: TagFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument],
        sortBy: String = "date"
    ): TagConnection
    metaData: Metadata @deprecated(reason : "Use Query.metadata instead.")
    metadata: Metadata
    page(path: String!): Page
    post(
        id: ID,
        "Will return an error if not nullable."
        nullable: Boolean = false,
        path: String
    ): Post
    tag(
        id: ID,
        "Will return an error if not nullable."
        nullable: Boolean = false,
        path: String
    ): Tag
}

type RemarkHeading {
    anchor: String
    depth: Int
    value: String
}

type Tag implements Node {
    belongsTo(
        filter: BelongsToFilterInput,
        limit: Int,
        order: SortOrder = DESC,
        page: Int,
        "Defaults to 25 when page is provided."
        perPage: Int,
        skip: Int = 0,
        sort: [SortArgument!],
        sortBy: String = "date"
    ): NodeBelongsTo
    id: ID!
    path(to: String = "default"): String
    title: String
}

type TagConnection implements NodeConnection {
    edges: [TagEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type TagEdge implements NodeConnectionEdge {
    next: Tag
    node: Tag
    previous: Tag
}

enum ImageFit {
    "Embed within both provided dimensions."
    contain
    "Crop to cover both provided dimensions."
    cover
    "Ignore the aspect ratio of the input and stretch to both provided dimensions."
    fill
    "Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified."
    inside
    "Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property."
    outside
}

enum RemarkHeadingLevels {
    h1
    h2
    h3
    h4
    h5
    h6
}

enum SortOrder {
    "Sort ascending"
    ASC
    "Sort descending"
    DESC
}

enum TypeName {
    Post
    Tag
}

input BelongsToFilterInput {
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    typeName: TypeNameQueryOperatorInput
}

input BooleanQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: Boolean
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [Boolean]
    "Filter by property not equal to provided value."
    ne: Boolean
    "Filter by property not matching any of the provided values."
    nin: [Boolean]
}

input DateQueryOperatorInput {
    "Filter by property between provided values."
    between: [Date]
    "Filter by date property equal to provided date value."
    dteq: Date
    "Filter by property of (strict) equality."
    eq: Date
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property greater than provided value."
    gt: Date
    "Filter by property greater or equal to provided value."
    gte: Date
    "Filter by property matching any of the provided values."
    in: [Date]
    "Filter by property less than provided value."
    lt: Date
    "Filter by property less than or equal to provided value."
    lte: Date
    "Filter by property not equal to provided value."
    ne: Date
    "Filter by property not matching any of the provided values."
    nin: [Date]
}

input IDQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: ID
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [ID]
    "Filter by property not equal to provided value."
    ne: ID
    "Filter by property not matching any of the provided values."
    nin: [ID]
}

input ImageQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: Image
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [Image]
    "Filter by property not equal to provided value."
    ne: Image
    "Filter by property not matching any of the provided values."
    nin: [Image]
    "Filter by property matching provided regular expression."
    regex: String
}

input JSONQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: JSON
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [JSON]
    "Filter by property not equal to provided value."
    ne: JSON
    "Filter by property not matching any of the provided values."
    nin: [JSON]
    "Filter by property matching provided regular expression."
    regex: String
}

input PageFilterInput {
    context: JSONQueryOperatorInput
    path: StringQueryOperatorInput
}

input PostFilterInput {
    canonical_url: BooleanQueryOperatorInput
    content: StringQueryOperatorInput
    cover_image: ImageQueryOperatorInput
    date: DateQueryOperatorInput
    description: StringQueryOperatorInput
    excerpt: StringQueryOperatorInput
    fileInfo: Post_FileInfoFilterInput
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    published: BooleanQueryOperatorInput
    series: BooleanQueryOperatorInput
    tags: TagListQueryOperatorInput
    title: StringQueryOperatorInput
}

input Post_FileInfoFilterInput {
    directory: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    name: StringQueryOperatorInput
    path: StringQueryOperatorInput
}

input SortArgument {
    by: String! = "date"
    order: SortOrder = DESC
}

input StringQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: String
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [String]
    "Filter by property not equal to provided value."
    ne: String
    "Filter by property not matching any of the provided values."
    nin: [String]
    "Filter by property matching provided regular expression."
    regex: String
}

input TagFilterInput {
    id: IDQueryOperatorInput
    path: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input TagListQueryOperatorInput {
    "Use the id field instead."
    contains: [ID]
    "Use the id field instead."
    containsAny: [ID]
    "Use the id field instead."
    containsNone: [ID]
    id: IDQueryOperatorInput
    "Use the id field instead."
    size: Int
}

input TypeNameQueryOperatorInput {
    "Filter by property of (strict) equality."
    eq: TypeName
    "Filter nodes that contain the field, including nodes where the field value is null."
    exists: Boolean
    "Filter by property matching any of the provided values."
    in: [TypeName]
    "Filter by property not equal to provided value."
    ne: TypeName
    "Filter by property not matching any of the provided values."
    nin: [TypeName]
}


scalar Date

scalar Image

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar File